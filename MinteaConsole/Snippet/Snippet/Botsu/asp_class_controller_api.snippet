<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>asp_class_controller_api</Title>
      <Author>Y.Toyoda</Author>
      <Description>[ApiController][Route]を使ってコントローラを定義する。使わなくて良いはず。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>asp_class_controller_api</Shortcut>
    </Header>
    <Snippet>
      <Code Language="CSharp" Kind="file" Delimiter="#"><![CDATA[
    // 引数について
    //[FromBody] は複合型パラメーターに対して推論されます。 [FromBody] 推論規則に対する例外は、IFormCollection や CancellationToken など、特殊な意味を持つ組み込みの複合型です。 バインディング ソース推論コードでは、そのような特殊な型は無視されます。
    //[FromForm] は IFormFile および IFormFileCollection 型のアクション パラメーターに対して推論されます。 簡易型またはユーザー定義型に対しては推論されません。
    //[FromRoute] は、ルート テンプレート内のパラメーターと一致する任意のアクション パラメーター名に対して推論されます。 複数のルートがアクション パラメーターと一致する場合、ルート値はいずれも[FromRoute] と見なされます。
    //[FromQuery] は他の任意のアクション パラメーターに対して推論されます。
    [ApiController]
    [Route("[controller]")]
    public class AaaaController : ControllerBase    // Web APIの処理だけの場合はControllerBaseを使用する
    {
        [HttpGet]
        public IEnumerable<WeatherForecast> Get()    // "Aaaa/"
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast   // 5件作成
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = "get"
            })
            .ToArray();
        }

        [HttpGet("{id}")] // "Aaaa/{id}"
        public IEnumerable<WeatherForecast> Aaaa(long id)
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast   // 5件作成
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = $"aaaa:{id}"
            })
            .ToArray();
        }

        // Routeは複数可
        //[Route("")]      // "Aaaa"
        //[Route("/")]     // ""
        [Route("Bbbb")] // "Aaaa/Bbbb"
        public ActionResult Bbbb()
        {
            // return File(いろいろ);
            // return PhysicalFile(いろいろ);
            // return BadRequest(Object);
            // return RedirectToPage(いろいろ);
            return Ok(new { message = "正常終了" });

            // 以下を使用しても良いが、不要だと思われる。
            // using Newtonsoft.Json;
            // JsonConvert.SerializeObject(value);
        }

        // ↓ぶっちゃけよく分からん

        //[HttpGet("{id}", Name = "MyPet")]
        //public async Task<IActionResult> GetAsync(int id)
        //{
        //    return new ObjectResult(new Pet(id));
        //}

        //[HttpPost]
        //public ActionResult<Pet> Create([FromBody]Pet pet)
        //{
        //    pet.Id = _petsInMemoryStore.Any() ?
        //             _petsInMemoryStore.Max(p => p.Id) + 1 : 1;
        //    _petsInMemoryStore.Add(pet);

        //    return CreatedAtAction("MyPet", new { id = pet.Id }, pet);
        //}
    }]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>