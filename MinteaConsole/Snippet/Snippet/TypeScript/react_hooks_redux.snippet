<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>react_hooks_redux</Title>
      <Author>Y.Toyoda</Author>
      <Description>reduxのtoolkitを使ったhooksの決定版。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>react_hooks_redux</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>SimpleCounter</ID>
          <ToolTip>名前Pascal</ToolTip>
          <Default>SimpleCounter</Default>
        </Literal>
        <Literal>
          <ID>simpleCounter</ID>
          <ToolTip>名前Camel</ToolTip>
          <Default>simpleCounter</Default>
        </Literal>
        <Literal>
          <ID>simple-counter</ID>
          <ToolTip>名前ハイフン繋ぎ</ToolTip>
          <Default>simple-counter</Default>
        </Literal>
      </Declarations>
      <Code Language="TypeScript" Kind="any" Delimiter="$"><![CDATA[
// ------------------------ $SimpleCounter$.ts ------------------------
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// 更に、独自のデータ型をinterfaceで作成し、stateに持たせても良い。

// state
export interface $SimpleCounter$State {
    count: number;
}

// 初期値
const $simpleCounter$InitialState: $SimpleCounter$State = {
    count: 1
};

// createSlice() の中では、stateの更新を行っても良い（他ではだめ）
const $SimpleCounter$ = createSlice({
    name: '$simpleCounter$',
    initialState: $simpleCounter$InitialState,
    reducers:   // 処理の定義
    {
        increment: (state) => { state.count++; },           // 第2引数を省略すると引数無しで呼び出せる
        decrement: (state, action) => { state.count--; },
        test: (state, action: PayloadAction<number>) => {   // PayloadActionで引数の型を指定する
            state.count = action.payload
        },
    }
});

export default $SimpleCounter$;


// ------------------------ $SimpleCounter$.tsx ------------------------
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import * as Module from '../store/$SimpleCounter$';

// 引数の定義
interface $SimpleCounter$Props {
    aaaa: number;
    bbbb?: string;  // 必須でない場合は?を付ける
}

/*
 * △△画面の表示
 * ↓呼び方
 * <Route path='/$simple-counter$' render={props => <$SimpleCounter$ aaaa={34} {...props} />}/>
 * ↓こっちで呼んだ場合でもpropsはnullにならず、aaaaとかがnullになってるので判定するとき注意
 * <Route path='/$simple-counter$' component={$SimpleCounter$} />
 */
const $SimpleCounter$ = (props: Partial<$SimpleCounter$Props>) => {
    // React本体に関数コンポーネント専用の保存領域を作成してもらい、そこにあるデータを読み書きできる
    // const [count, setCount] = useState(0);    // フィールド名、セッター名、初期値

    // レンダリングの後に処理を動作させることができます（レンダリングの前はuseLayoutEffect）
    useEffect(() => {
        console.log('hello useEffect');
        
        //const timerId = setInterval(() => setTime(new Date().getTime()), 1000);
        //return () => clearInterval(timerId);    // returnを使うと、クリーンアップ関数を登録できる
    }, []); // この第2引数にcountをセットすると、count変更時に再びRenderされる

    /*
    // 他に値を送るための入れ物を使う場合は useContext を使用する
    // コストの大きい計算結果をキャッシュする場合は、useMemoを使用する
    const calcResult = useMemo(() => expensiveFunc(), []);
    // 関数をキャッシュする場合はuseCallbackを使う
    const onClick = useCallback(() => alert('Hi!'), []);
    // DOMから値を取りたい場合はuseRefを使用する
    */
    
    // store に紐付いた dispatch を取得する
    const dispatch = useDispatch();

    // store の state を取得する
    const count = useSelector((state: any) => state.$simpleCounter$.count);
    
    // 描画処理
    return (
        <React.Fragment>
            <p> count: {count} </p>
            {/* 引数の数は、reducersの関数の引数で決まります。 */}
            <button onClick={() => dispatch($SimpleCounter$.default.actions.increment())}>increment</button>
            <button onClick={() => dispatch($SimpleCounter$.default.actions.decrement(1))}>decrement</button>
        </React.Fragment>
    );
};

export default $SimpleCounter$;


// --------------- NavMenu.tsx --------------- 
//<NavItem>
//    <NavLink tag={Link} to='/$simple-counter$'>$SimpleCounter$</NavLink>
//</NavItem>


// --------------- index.ts --------------- 
import $SimpleCounter$ from '../store/$SimpleCounter$';

    $simpleCounter$: $SimpleCounter$.reducer   // △△画面の処理

// --------------- App.tsx --------------- 
import $SimpleCounter$ from './components/$SimpleCounter$';

        <Route path='/$simple-counter$' component={$SimpleCounter$} />
        <Route path='/$simple-counter$' render={props => <$SimpleCounter$ aaaa={34} {...props} />} />
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>