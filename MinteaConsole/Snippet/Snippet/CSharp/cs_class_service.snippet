<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>cs_class_service</Title>
      <Author>Y.Toyoda</Author>
      <Description>serviceモジュールの作成。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>cs_class_service</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Test</ID>
          <ToolTip>名前Pascal</ToolTip>
          <Default>Test</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="file" Delimiter="%"><![CDATA[
    /// <summary>
    /// オプション（Serviceでこれができるか未確認）
    /// </summary>
    public class %Test%Option
    {
        // TODO:設定項目があれば作成すること
        /// <summary>
        /// 設定項目
        /// </summary>
        public string HomeDirectory { get; set; }
    }
    
    public interface I%Test%Service
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="raw"></param>
        /// <returns></returns>
        public (string hashed, string salt) Hash(string raw);
    }

    public class %Test%Service: I%Test%Service
    {
        private readonly ILogger<%Test%Service> _logger;
        
        public %Test%Service(ILogger<%Test%Service> logger, XxxOption options = null)
        {
            _logger = logger;
        }
        
        public (string hashed, string salt) Hash(string raw)
        {
            _logger.LogInformation($"%Test%Service.Hash: {hashed}, {salt}");
            var hashed = string.Empty;
            var salt = string.Empty;
            
            return (hashed, salt);
        }
    }
    
    // TODO:[Startup.cs]に以下3つのうち1つを追加する
            // DIされるたびにインスタンスを生成します。
            services.AddTransient<I%Test%Service, %Test%Service>();
            // クライアント要求 (接続) ごとに 1 回作成されます。
            // 複数のサービスクラスやドメインクラスでの処理を跨ってインスタンスが維持される必要がある場合に使用します。
            services.AddScoped<I%Test%Service, %Test%Service>();
            // 一度DIされると、アプリケーションが終了するまで、最初にDIされた値を使いまわします。
            // アプリケーション動作内で１つのインスタンスを共有したい場合に使用します。
            services.AddSingleton<I%Test%Service, %Test%Service>();
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>