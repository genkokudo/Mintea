<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>asp_method_net_csv_download</Title>
      <Author>Y.Toyoda</Author>
      <Description>DBからCSVデータを作成しダウンロードします。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>asp_method_net_csv_download</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>Data</ID>
          <ToolTip>テーブル名</ToolTip>
          <Default>Data</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Kind="method decl" Delimiter="#"><![CDATA[
        // PageModel用
        /// <summary>
        /// CSVデータをダウンロードします。
        /// </summary>
        /// <returns></returns>
        public IActionResult OnPostDownloadAsync()
        {
            //var result = File(Render#Data#(datas), "text/csv", string.Format("Discussion_{0}_#Data#.csv", id));
            //return File(System.Text.Encoding.UTF8.GetBytes(output), "application/xml", Input.Title + ".snippet");
            return File(filepath, "text/csv", string.Format("Test.csv"));
        }
        
        /// <summary>
        /// CSVデータをダウンロードします。
        /// </summary>
        /// <returns></returns>
        public ActionResult Download#Data#(long id)
        {
            try
            {
                var datas = _context.#Data#s
                    .AsNoTracking()
                    .Where(x => x.System.Id == id)
                    .Include(x => x.System)
                        .ThenInclude(x => x.User)
                    .Include(x => x.User)
                    .ToList();

                if (!presenters.Any())
                {
                    TempData.AddSuccessMessage(_localizer["ダウンロード対象のデータはありません。"]);
                    return RedirectToAction("Index");
                }

                foreach (var item in datas)
                {
                    item.Votes = _context.Votes.Where(v => v.System.Id == id && v.DataId == item.Id).ToList();
                }

                var result = File(Render#Data#(datas), "text/csv", string.Format("System_{0}_#Data#.csv", id));
                return result;
            }
            catch (Exception ex)
            {
                TempData.AddErrorMessage(ex.Message);
                return RedirectToAction("Index");
            }
        }

        /// <summary>
        /// 評価データCSVファイル生成処理です。
        /// </summary>
        /// <param name="datas">データ</param>
        /// <returns>CSVの内容</returns>
        private byte[] Render#Data#(List<#Data#> datas)
        {
            var records = new List<string>();
            records.Add("データ名, 作成者名, 作成日時, 獲得数\r\n");
            foreach (var data in datas.OrderBy(x => x.User.Id))
            {
                var lineData = data.System.Id.ToString();
                lineData += "," + data.System.Name;
                lineData += ",\"" + data.System.User.Name;
                lineData += "\"," + data.System.CreatedDate.ToLocalDateString();
                lineData += "," + data.Votes.Count();
                lineData += "\r\n";
                records.Add(lineData);
            }
            // Excelで表示するとき文字化けしないためにUTF8(BOM)で出力する
            Encoding enc = new UTF8Encoding(true);
            using var stream = new MemoryStream();
            using (var writer = new StreamWriter(stream, enc))
            {
                foreach (var record in records)
                {
                    writer.Write(record);
                }
            }
            return stream.ToArray();
        }
        //<form id="form" method="post">
        //    <table class="table table-hover table-striped" id="table">
        //        <thead class="thead-dark">
        //            <tr>
        //                <th class="content-size">ID</th>
        //                <th class="content-size">@Localizer["データ名"]</th>
        //                <th class="content-size">@Localizer["作成者"]</th>
        //                <th class="content-size">@Localizer["作成日時"]</th>
        //                <th class="content-size">@Localizer["評価データ"]</th>
        //            </tr>
        //        </thead>
        //        <tbody>
        //            @foreach (var item in Model.Discussions)
        //            {
        //                <tr>
        //                    <td class="content-size">@item.Id</td>
        //                    <td class="content-size">@item.Name</td>
        //                    <td class="content-size text-nowrap">@item.DiscussionUser.Name</td>
        //                    <td class="content-size">@item.CreatedDate.ToLocalDateString()</td>
        //                    <td class="text-center">
        //                        <a class="btn btn-primary d-block d-lg-none" href="@Href($"~/Download/Popularity/?id={item.Id}")" data-toggle="tooltip" title=@Localizer["データダウンロード"]><i class="fa fa-download"></i></a>
        //                        <a class="btn btn-primary btn-sm d-none d-lg-block" href="@Href($"~/Download/Popularity/?id={item.Id}")"><i class="fa fa-download"></i> @Localizer["ダウンロード"]</a>
        //                        <!-- PageModel用 -->
        //                        <button asp-page-handler="Download" asp-route-id="@item.Id" type="submit" class="btn btn-success btn-sm d-none d-lg-block"><i class="fa fa-download"></i> Stamp一覧ダウンロード</button>
        //                    </td>
        //                </tr>
        //            }
        //        </tbody>
        //    </table>
        //</form>]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>