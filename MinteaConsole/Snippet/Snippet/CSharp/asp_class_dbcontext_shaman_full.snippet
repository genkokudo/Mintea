<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>asp_class_dbcontext_shaman_full</Title>
      <Author>Y.Toyoda</Author>
      <Description>標準項目更新とshaman使用を含めたDbContextを作成します。家用。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>asp_class_dbcontext_shaman_full</Shortcut>
    </Header>
    <Snippet>
      <Code Language="CSharp" Kind="file" Delimiter="$"><![CDATA[
    // データモデルを追加したとき、このクラスも更新すること
    public class ApplicationDbContext : IdentityDbContext<IdentityUser, IdentityRole, string>
    {
        public DbSet<Tekito> Tekitos { get; set; }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        /// <summary>
        /// 複合主キーの設定
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tekito>()
                .HasKey(c => new { c.Hage, c.Foo });
        }

        #region 標準項目設定
        /// <summary>
        /// 登録・更新時に呼び出して
        /// 標準項目（更新日時とか）の設定を行う
        /// </summary>
        /// <param name="name">登録・更新者名</param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public Task<int> SaveChangesAsync(string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // 保存時に日時を設定する
            SetCreatedDateTime(name);

            return base.SaveChangesAsync(cancellationToken);
        }

        private void SetCreatedDateTime(string name)
        {
            DateTime now = DateTime.Now;

            // 追加エンティティのうち、IEntity を実装したものを抽出
            var entities = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified)
                .Select(e => e.Entity)
                .OfType<IEntity>();

            foreach (var entity in entities)
            {
                entity.UpdatedDate = now;
                entity.UpdatedBy = name;
                if (entity.CreatedDate is null)
                {
                    entity.CreatedDate = now;
                    entity.CreatedBy = name;
                }
            }
        }
        #endregion
    }]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>