<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>asp_class_mediator</Title>
      <Author>Y.Toyoda</Author>
      <Description>mediatorパターン基本セットです。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>asp_class_mediator</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MediatR</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Index</ID>
          <ToolTip>クラス名</ToolTip>
          <Default>Index</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="file" Delimiter="$"><![CDATA[
    // Install-Package MediatR
    // Install-Package MediatR.Extensions.Microsoft.DependencyInjection
    public class $Index$Model : PageModel
    {
        private readonly IMediator _mediator;

        public $Index$Model(IMediator mediator)
        {
            _mediator = mediator;
        }
        public $Index$Result Data { get; private set; }

        public async Task<IActionResult> OnGetAsync()
        {
            Data = await _mediator.Send(new $Index$Query { Id = 1 });
            return Page();
        }

        public IActionResult OnPost()
        {
            return Page();
        }
    }
    
    /// <summary>
    /// コントローラの場合はこのクラスを使用する
    /// </summary>
    [Authorize]
    public class $Index$Controller : ControllerBase
    {
        private readonly ILogger<$Index$Controller> _logger;
        private readonly IMediator _mediator;

        public $Index$Controller(IMapper mapper, ILogger<$Index$Controller> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }

        /// <summary>
        /// $Index$/Aaaa
        /// </summary>
        /// <returns></returns>
        public async Task<$Index$Result> AaaaAsync()
        {
            return await _mediator.Send(new $Index$Query { });
        }
    }

    /// <summary>検索条件</summary>
    public class $Index$Query : IRequest<$Index$Result>
    {
        public long Id { get; set; } 
    }

    /// <summary>検索結果</summary>
    public class $Index$Result
    {
        /// <summary>検索した情報</summary> 
        public TestData[] Datas { get; set; }
    }

    /// <summary> 
    /// 検索ハンドラ 
    /// $Index$QueryをSendすると動作し、$Index$Resultを返す 
    /// </summary> 
    public class $Index$QueryHandler : IRequestHandler<$Index$Query, $Index$Result>
    {
        private readonly ApplicationDbContext _db;

        public $Index$QueryHandler(ApplicationDbContext db)
        {
            _db = db;
        }

        /// <summary>
        /// 検索の方法を定義する
        /// IRequestHandlerで実装することになっている
        /// </summary>
        /// <param name="query">検索条件</param>
        /// <param name="token"></param>
        /// <returns></returns>
        public async Task<$Index$Result> Handle($Index$Query query, CancellationToken token)
        {
            // DB検索
            var datas = _db.TestDatas.AsNoTracking().ToArray(); 

            // 検索結果の格納
            var result = new $Index$Result
            {
                Datas = datas
            };
            return await Task.FromResult(result);
        }
    }
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>