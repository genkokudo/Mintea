<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>react_add_view_toolkit</Title>
      <Author>Y.Toyoda</Author>
      <Description>公式toolkitに対応した画面を追加するときのテンプレートです。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>react_add_view_toolkit</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>ChartNav</ID>
          <ToolTip>名前Pascal</ToolTip>
          <Default>ChartNav</Default>
        </Literal>
        <Literal>
          <ID>chart-nav</ID>
          <ToolTip>名前ハイフン繋ぎ</ToolTip>
          <Default>chart-nav</Default>
        </Literal>
        <Literal>
          <ID>chartnav</ID>
          <ToolTip>名前小文字</ToolTip>
          <Default>chartnav</Default>
        </Literal>
      </Declarations>
      <Code Language="TypeScript" Kind="file" Delimiter="$"><![CDATA[
// TODO:csprojのItemGroupに追加されてしまいjsが生成されてしまうので、csprojの追加された記述を元に戻すこと。
// package.jsonの "dependencies" に "@reduxjs/toolkit" を追加。
// ※このコンポーネントの書き方はRouteを使って遷移する前提で、他の画面に貼ることはできないと思います。
/* ---- $ChartNav$.ts 状態・アクション ---- */
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// 更に、独自のデータ型をinterfaceで作成し、stateに持たせても良い。

// state
export interface $ChartNav$State {
    count: number;
}

// 初期値
const $ChartNav$InitialState: $ChartNav$State = {
    count: 0
};

// createSlice() で actions と reducers を生成する
// createSlice() の中では、stateの更新を行っても良い（他ではだめ）
const $ChartNav$Module = createSlice({
    name: "$ChartNav$",    // 名前
    initialState: $ChartNav$InitialState,  // 初期値
    reducers:
    {
        // 処理の定義
        increment: (state, action) => { state.count++; },
        decrement: (state, action) => { state.count--; },
        test: (state, action: PayloadAction<number>) => {   // PayloadActionで引数の型を指定する
            state.count = action.payload
        },
    }
});

export default $ChartNav$Module;


/* ---- $ChartNav$.tsx 見た目・コンポーネント ---- */
import * as React from 'react';
import { RouteComponentProps } from 'react-router';
import * as $ChartNav$Module from '../store/$ChartNav$';
import { connect } from 'react-redux';
import { ApplicationState } from '../store';

/**
 * 状態と処理の定義です。
 */
type $ChartNav$Props =
    $ChartNav$Module.$ChartNav$State &
    typeof $ChartNav$Module.default.actions &
    RouteComponentProps<{}>;    // TODO:URLに引数がある場合は{userId: string}のように書く

/**
 * 画面の描画を定義します。
 */
class $ChartNav$ extends React.PureComponent<$ChartNav$Props> {
    public render() {
        return (
            <p>$ChartNav$</p>
            <button type="button" className="btn btn-primary btn-lg" onClick={() => { this.props.increment(1); }}>増やす</button>
        );
    }
}

export default connect(
    (state: ApplicationState) => state.$chartnav$,
    $ChartNav$Module.default.actions
)($ChartNav$);



/* ---- App.tsx ---- */
import $ChartNav$ from './components/$ChartNav$';
<Route path='/$chart-nav$' component={$ChartNav$} />

/* ---- index.ts ---- */
import * as $ChartNav$Module from './$ChartNav$';

$chartnav$: $ChartNav$Module.$ChartNav$State | undefined;

$chartnav$: $ChartNav$Module.default.reducer,

/* ---- NavMenu.tsx:メニューに追加する場合のみ ---- */
<NavItem>
    <NavLink tag={Link} className="text-dark" to="/$chart-nav$">$ChartNav$</NavLink>
</NavItem>

]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>