<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>react_component_methods</Title>
      <Author>Y.Toyoda</Author>
      <Description>Component内で使用するメソッド集です。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>react_component_methods</Shortcut>
    </Header>
    <Snippet>
      <Code Language="TypeScript" Kind="any" Delimiter="$"><![CDATA[
    render() {
        return <Aaaa /> ;
    }
    
    // ComponentがDOMツリーに追加される前に一度だけ呼ばれる
    // 初期化処理を行うのに適している。
    componentWillMount(){
        // setStateしても良い
        // server-side rendering時にも呼ばれる
    }

    // ComponentがDOMツリーに追加された状態で呼ばれる
    // DOMに関わる初期化処理を行いたい時に使用する。
    componentDidMount(){
        // server-side renderingの時には呼ばれないので
        // AjaxリクエストやsetIntervalの登録などに使用する。
        // request.get('/path/to/api', res => {
        //     if (this.isMounted()) {
        //         this.setState({data: res.body.data});
        //     }
        // });
    }

    // Propが更新される時に呼ばれる
    componentWillReceiveProps(nextProps){
        // 親ComponentのStateがPropとして渡されていて
        // その値が変化した時に画面の表示以外で何かしたいときに使用。
        // Propの値に応じてStateの値を更新したいようなときに使用。
    }

    // 独自でPropやStateを比較するような処理を実装する
    shouldComponentUpdate: function(nextProps, nextState){
        return true;
        return false;    // rerenderしない
    }

    // Componentが更新する前に呼ばれる
    componentWillUpdate(nextProps, nextState){
        // setState禁止。componentWillReceivePropsですること。
    }

    // Componentが更新された後に呼ばれる
    componentDidUpdate(prevProps, prevState){
        // DOMの変化にフックして何かしたい場合に使用。
    }

    // ComponentがDOMから削除される時に呼ばれる
    componentWillUnmount(){
        // イベントの解除などクリーンアップ処理を実装。
    }
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>