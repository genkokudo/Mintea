<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>react_hooks_chart_option_plugin</Title>
      <Author>Y.Toyoda</Author>
      <Description>chartjsのオプションとプラグインのテンプレ</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>react_hooks_chart_option_plugin</Shortcut>
    </Header>
    <Snippet>
      <Code Language="TypeScript" Kind="any" Delimiter="$"><![CDATA[
    // グラフの設定
    const options = {
        scales: {
            xAxes: [{
                stacked: true, //積み上げ棒グラフにする設定
                categoryPercentage: 0.4, //棒グラフの太さ
                gridLines: {
                    display: false
                }
            }],
            yAxes: [{
                stacked: true //積み上げ棒グラフにする設定
            }]
        },
        legend: {
            display: false  //凡例を表示しない
        },
        tooltips: {
            enabled: false, // 描画方法を変更するので、通常のtooltipをオフにする
        },
        title: {
            display: false
        },
        responsive: false,  // グラフのサイズを直接指定するのでレスポンシブを切る
        events: [],     // ホバーを無効にするために設定
        exPluginName: 'overview'
    };
    
    // グラフの表示サイズをウィンドウサイズ基準に設定
    const type = 'bar';
    const chartWidth = Math.min(window.innerWidth, 1200);
    const chartHeight = Math.min(window.innerHeight - 240, 900);

    // 読み込み後の処理
    useEffect(() => {
        // プラグイン設定を行う
        Chart.pluginService.register({
            afterDatasetsDraw: function (chart: Chart, easing: any) {
                var options: ExChartOptions = chart.options as ExChartOptions;
                if (options.exPluginName === 'overview') {
                    var ctx = chart.ctx;
                    if (chart.data.datasets) {
                        var yBase = 0;  // グラフ一番下のY座標
                        chart.data.datasets.forEach(function (dataset, i) { // iは通しで何項目目か
                            var meta = chart.getDatasetMeta(i);
                            if (!meta.hidden) {
                                meta.data.forEach(function (element, index) { // indexは左から何項目目か
                                    if (yBase == 0) {
                                        yBase = element._view.base;    // 目的地の座標を使用する場合は"_model"の値を呼ぶこと
                                    }
                                    if (ctx) {
                                        // フォント設定
                                        ctx.fillStyle = '#404040';

                                        var fontSize = 12;
                                        var fontStyle = 'normal';
                                        var fontFamily = 'Helvetica Neue';
                                        ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);

                                        // 文字の描画
                                        if (dataset.data) {
                                            var data = dataset.data[index];
                                            if (data) { // ここで0だったら書かない
                                                var dataString = data.toString();
                                                var y = element._view.base + (element._view.y - element._view.base) / 2;
                                                if (element._view.borderWidth) {
                                                    // 棒の高さが十分でないときは、ラベルが重ならないように描画する
                                                    y = Math.min(y, yBase - (fontSize + 2) * element._view.borderWidth);
                                                }
                                                // 中央揃え
                                                ctx.textAlign = 'center';
                                                ctx.textBaseline = 'middle';
                                                ctx.fillText(dataString, element._view.x, y);

                                                // データラベルの描画
	                                            var labelText = '';
	                                            if (dataset.label) {
	                                                labelText = dataset.label;
	                                            }
                                                ctx.textAlign = 'end';
                                                ctx.fillText(labelText, element._view.x - 22, y);   // 22は調整（widthが取れないので）
                                            }
                                        }
                                        
//                                        // 四角形描画
//                                        if (dataset.backgroundColor) {
//                                            ctx.fillStyle = dataset.backgroundColor.toString();
//                                        }
//                                        ctx.fillRect(x - fontSize / 2, starty - fontSize - fontSize / 2, fontSize, fontSize);

//                                        // 文字描画（縦書き）
//                                        ctx.fillStyle = '#000000';
//                                        var label = '';
//                                        if (dataset.label) {
//                                            label = dataset.label.replace('ー', '');
//                                        }
//                                        Array.prototype.forEach.call(label, function (ch, j) {
//                                            if (ctx) {
//                                                ctx.fillText(ch, x, starty + fontSize * j);
//                                            }
//                                        });

                                    }
                                });
                            }
                        });
                    }
                }
            }
        });
    });

//import { Container } from 'reactstrap';
//import { Bar } from 'react-chartjs-2';
//import Chart from 'chart.js';
///**
// * Chartオプションの項目を追加します。
// */
//interface ExChartOptions extends Chart.ChartOptions {
//    exPluginName: string; // 追加した型
//}

//    <Container className={'d-flex justify-content-center'}>
//        <Bar type={type} data={chartData} options={options} width={chartWidth} height={chartHeight} />
//    </Container>]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>